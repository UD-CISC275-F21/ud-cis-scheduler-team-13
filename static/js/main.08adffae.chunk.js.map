{"version":3,"sources":["components/SemesterTable.tsx","components/AddSemester.tsx","components/AllSemestersTable.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SemesterTable","semesterName","creditLimit","allCourses","setAllCourses","courses","Container","Table","map","course","id","name","description","prereqs","Button","onClick","console","log","AddSemester","useState","dropdownSeason","setDropdownSeason","year","setYear","Row","Col","DropdownButton","title","onSelect","key","Dropdown","Item","eventKey","Form","Group","Control","type","placeholder","onChange","newAllCourses","AllSemestersTable","courses1","defaultCourses","partitionedKeys","n","keys","Object","partitioned","index","indexOf","splice","i","length","slice","partitionSemesters","nKeys","includes","Header","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08adffae.chunk.js","sourcesContent":["import { Course } from \"../interfaces/Course\";\nimport React, { Container, Table, Button } from \"react-bootstrap\";\n\n\nexport function SemesterTable({semesterName, creditLimit, allCourses, setAllCourses}: {\n        semesterName: string, \n        creditLimit: number,\n        allCourses: Record<string, Course[]>\n        setAllCourses: (c: Record<string, Course[]>)=>void}): JSX.Element {\n\n    const courses: Course[] = allCourses[semesterName];\n\n    // Temporary function\n    function addCourse(): void {\n        setAllCourses(allCourses);\n        console.log(\"adding course\");\n    }\n\n    return <Container>\n        <h4>\n            {semesterName}, credit limit: {creditLimit}\n        </h4>\n        \n        <Table>\n            <thead>\n                <tr>\n                    <th>ID</th><th>Name</th><th>Description</th><th>Prereqs</th>\n                </tr>\n            </thead>\n            <tbody>\n                { courses.map((course: Course) => {\n                    return <tr key={course.id}>\n                        <td>{course.id}</td>\n                        <td>{course.name}</td>\n                        <td>{course.description}</td>\n                        <td>{course.prereqs}</td>\n                    </tr>;\n                })}\n            </tbody>\n        </Table>\n        <Button onClick={addCourse}>temp add course</Button>\n    </Container>;\n}","import { useState } from \"react\";\nimport React, { Container, Row, Dropdown, DropdownButton, Form, Col, Button } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\n\nexport function AddSemester({allCourses, setAllCourses}: {\n    allCourses: Record<string, Course[]>,\n    setAllCourses: (c: Record<string, Course[]>)=>void}): JSX.Element {\n\n    const [dropdownSeason, setDropdownSeason] = useState<string>(\"Fall\");\n    const [year, setYear] = useState<string>(\"2022\");\n\n    function handleSeasonSelect(key: string | null): void {\n        if (key !== null) {\n            setDropdownSeason(key);\n        }\n    }\n\n    function yearChange(): void {\n        setYear(year);\n    }\n\n    function addSemester(): void {\n        const semesterName: string = dropdownSeason + year;\n        const newAllCourses: Record<string, Course[]> = {...allCourses};\n        newAllCourses[semesterName] = [];\n        setAllCourses(newAllCourses);\n    }\n\n    return <Container>\n        <Row>\n            <h3>Add Semester to Plan</h3>\n        </Row>\n        <Row>\n            <Col>\n                <DropdownButton id=\"dropdown-season\" title={dropdownSeason} onSelect={handleSeasonSelect}>\n                    <Dropdown.Item eventKey=\"Fall\">Fall</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Winter\">Winter</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Spring\">Spring</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Summer\">Summer</Dropdown.Item>\n                </DropdownButton>\n            </Col>\n            <Col>\n                <Form>\n                    <Form.Group>\n                        <Form.Control type=\"year\" placeholder=\"year\" onChange={yearChange}></Form.Control>\n                    </Form.Group>\n                </Form>\n            </Col>\n            <Col>\n                <Button type=\"submit\" onClick={addSemester}>Submit</Button>\n            </Col>\n        </Row>\n    </Container>;\n}","import { SemesterTable } from \"./SemesterTable\";\nimport React, { Container, Row, Col } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\nimport { useState } from \"react\";\nimport { AddSemester } from \"./AddSemester\";\n\nexport function AllSemestersTable(): JSX.Element {\n\n    const courses: Course[] = [\n        {id: \"CISC275\", name: \"Introduction to Software Engineering\", description: \"Description 1\", prereqs: [\"CISC220\"]},\n        {id: \"CISC181\", name: \"Introduction to Computer Science II\", description: \"Description 2\", prereqs: [\"CISC108\"]},\n        {id: \"CISC210\", name: \"Introduction to Systems Programming\", description: \"Description 3\", prereqs: [\"CISC108\"]}];\n\n    const courses1: Course[] = [\n        {id: \"CISC108\", name: \"Introduction to Computer Science I\", description: \"Description 1\", prereqs: []},\n        {id: \"CISC220\", name: \"Data Structures\", description: \"Description 2\", prereqs: [\"CISC210\"]},\n        {id: \"CISC260\", name: \"Machine Organization and Assembly Language\", description: \"Description 3\", prereqs: [\"CISC210\"]}];\n\n    // Take list of courses and sort them into default semesters,\n    // or maybe leave semesters blank by default\n    const defaultCourses: Record<string, Course[]> = {\n        \"Fall2021\": courses1,\n        \"Spring2021\": courses1,\n        \"Summer2021\": courses,\n        \"Winter2021\": courses,\n        \"Remaining\": []};\n\n    // Hook to track courses across semesters\n    // Pass this into SemesterTable\n    const [allCourses, setAllCourses] = useState<Record<string, Course[]>>(defaultCourses);\n\n    // https://stackoverflow.com/questions/11345296/partitioning-in-javascript\n    // user starbeamrainbowlabs\n    function partitionSemesters(allCourses: Record<string, Course[]>, n: number): string[][] {\n        // Returns allCourses keys partioned by n\n        // example: [Fall, Summer, Winter, Spring] -> [[Fall, Summer], [Winter, Spring]]\n        const keys = Object.keys(allCourses);\n        const partitioned: string[][] = [];\n\n        // Remove Remaining key\n        const index: number = keys.indexOf(\"Remaining\");\n        if (index > -1) {\n            keys.splice(index,1);\n        }\n\n        for (let i = 0; i < keys.length; i += n) {\n            partitioned[partitioned.length] = keys.slice(i, i+n);\n        }\n        return partitioned;\n    }\n\n    function getCreditLim(semesterName: string): number {\n        if (semesterName.includes(\"Fall\") || semesterName.includes(\"Spring\")) {\n            return 21;\n        } else if (semesterName.includes(\"Winter\") || semesterName.includes(\"Summer\")) {\n            return 7;\n        } else {\n            return -1; // this shouldn't happen lol\n        }\n    }\n    \n    const partitionedKeys = partitionSemesters(allCourses, 2);\n\n    return <Container>\n        <AddSemester allCourses={allCourses} setAllCourses={setAllCourses}></AddSemester>\n        {partitionedKeys.map((nKeys: string[]) => {\n            return <Row key={nKeys[1]}>\n                {nKeys.map((key: string) => {\n                    return <Col key={key}>\n                        <SemesterTable semesterName={key} creditLimit={getCreditLim(key)} \n                            allCourses={allCourses} setAllCourses={setAllCourses}></SemesterTable>\n                    </Col>;\n                })}\n            </Row>;\n        })}\n    </Container>;\n}","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nexport function Header(): JSX.Element {\n    return(\n        <Container>\n            <Row>\n                <Col>\n                    Logo goes here.\n                </Col>\n                <Col>\n                    UD CIS Scheduler\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { AllSemestersTable } from \"./components/AllSemestersTable\";\nimport { Header } from \"./components/Header\";\n\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n\n            <Header></Header>\n            <AllSemestersTable></AllSemestersTable>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}